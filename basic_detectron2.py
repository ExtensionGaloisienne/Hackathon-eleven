# -*- coding: utf-8 -*-

# [Groupe 2] This .py file is for reading purposes only.
# To run, please open basic_detectron2.ipynb file in Google Colaboratory

"""basic_detectron2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xRkFxTUL5uwY0JkFPOFbdP0Yg5BFOrl0

# Worksite Safety Monitoring

## Group 2 (Matthieu, Dimitri, Leonard, Reda)

<img src="https://dl.fbaipublicfiles.com/detectron2/Detectron2-Logo-Horz.png" width="500">

# Install detectron2
"""

#!python -m pip install pyyaml==5.1

# Detectron2 has not released pre-built binaries for the latest pytorch (https://github.com/facebookresearch/detectron2/issues/4053)
# so we install from source instead. This takes a few minutes.

#!python -m pip install 'git+https://github.com/facebookresearch/detectron2.git'

# Install pre-built detectron2 that matches pytorch version, if released:
# See https://detectron2.readthedocs.io/tutorials/install.html for instructions
#!pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/{CUDA_VERSION}/{TORCH_VERSION}/index.html

# exit(0)  # After installation, you may need to "restart runtime" in Colab. This line can also restart runtime

import torch, detectron2
TORCH_VERSION = ".".join(torch.__version__.split(".")[:2])
CUDA_VERSION = torch.__version__.split("+")[-1]
print("torch: ", TORCH_VERSION, "; cuda: ", CUDA_VERSION)
print("detectron2:", detectron2.__version__)

# Some basic setup:
# Setup detectron2 logger
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

# import some common libraries
import numpy as np
import os, json, cv2, random
from google.colab.patches import cv2_imshow

# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog

"""# Run a pre-trained detectron2 model

We first download an image from the COCO dataset:
"""

# if your files are on your google drive (e.g. when using colab)
from google.colab import drive
drive.mount('/content/drive')

def choose_random_image(directory):
    img_extension = ["png", "jpeg", "jpg"]  # Image Extensions to be chosen from
    all_images = list()
    for img in os.listdir(directory):  # Lists all files
        ext = img.split(".")[len(img.split(".")) - 1]
        if ext in img_extension:
            all_images.append(img)
    # choice = random.randint(0, len(allImages) - 1)
    # chosen_image = allImages[choice]  # Do Whatever you want with the image file
    random_image = random.choice(all_images)
    return os.path.join(directory, random_image)

#!wget http://images.cocodataset.org/val2017/000000439715.jpg -q -O input.jpg
folder = '/content/drive/MyDrive/Ponts/2A/Hackathon-eleven/data'
data = '/Detection_Train_Set/Detection_Train_Set_Img'
good_picks = []

# Run this cell until you find a satisfying image
path = choose_random_image(folder + data)
im = cv2.imread(path)
cv2_imshow(im)

good_picks.append(path)
print(good_picks)

"""Then, we create a detectron2 config and a detectron2 `DefaultPredictor` to run inference on this image."""

# Run this cell for each image

cfg = get_cfg()
# add project-specific config (e.g., TensorMask) here if you're not running a model in detectron2's core library
cfg.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"))
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  # set threshold for this model
# Find a model from detectron2's model zoo. You can use the https://dl.fbaipublicfiles... url as well
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")
predictor = DefaultPredictor(cfg)
outputs = predictor(im)

# look at the outputs. See https://detectron2.readthedocs.io/tutorials/models.html#model-output-format for specification
print(outputs["instances"].pred_classes)
print(outputs["instances"].pred_boxes)

# We can use `Visualizer` to draw the predictions on the image.
v = Visualizer(im[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2)
out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
cv2_imshow(out.get_image()[:, :, ::-1])

"""### Prediction of only 1 class using Detectron2"""

from detectron2.structures import Boxes

input_image_path = path

oim = cv2.imread(input_image_path)
#print('original image')
#cv2_imshow(im)
cfg = get_cfg()
# add project-specific config (e.g., TensorMask) here if you're not running a model in detectron2's core library
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_X_101_32x8d_FPN_3x.yaml"))
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.65  # set threshold for this model
# Find a model from detectron2's model zoo. You can use the https://dl.fbaipublicfiles... url as well
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Detection/faster_rcnn_X_101_32x8d_FPN_3x.yaml")
#cfg.MODEL.DEVICE = 'cpu' #changing to cpu
predictor = DefaultPredictor(cfg)

## Function for detecting and segmenting only 1 class i.e cups
def onlykeep_person_class(outputs):
  cls = outputs['instances'].pred_classes
  scores = outputs["instances"].scores
  boxes = outputs['instances'].pred_boxes

  # index to keep whose class == 0
  indx_to_keep = (cls == 0).nonzero().flatten().tolist()
    
  # only keeping index  corresponding arrays
  cls1 = torch.tensor(np.take(cls.cpu().numpy(), indx_to_keep))
  scores1 = torch.tensor(np.take(scores.cpu().numpy(), indx_to_keep))
  boxes1 = Boxes(torch.tensor(np.take(boxes.tensor.cpu().numpy(), indx_to_keep, axis=0)))
  
  # create new instance obj and set its fields
  obj = detectron2.structures.Instances(image_size=(oim.shape[0], oim.shape[1]))
  obj.set('pred_classes', cls1)
  obj.set('scores', scores1)
  obj.set('pred_boxes',boxes1)
  return obj

### predictions and only cup detection display
original_outputs = predictor(oim) #30 seconds(CPU) #1 seconds(GPU)
modified_outputs = onlykeep_person_class(original_outputs)


v = Visualizer(oim[:, :, ::-1], MetadataCatalog.get(cfg.DATASETS.TRAIN[0]), scale=1.2)
out = v.draw_instance_predictions(modified_outputs.to("cpu"))
cv2.imwrite(input_image_path.replace(".","_only_person_detected."),out.get_image()[:, :, ::-1])
cv2_imshow(out.get_image()[:, :, ::-1])